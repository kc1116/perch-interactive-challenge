{"version":3,"sources":["Feed.js","App.js","serviceWorker.js","index.js"],"names":["style","h1","marginTop","h2","margin","h3","padding","last","marginBottom","Interaction","List","Item","key","Math","random","toString","Content","Header","this","props","productName","timestamp","Description","interactionType","id","React","EventFeed","state","ws","WebSocket","connected","isInfiniteLoading","interactions","onopen","setState","onmessage","evt","message","JSON","parse","data","push","identifier","console","log","onclose","as","textAlign","content","Segment","inverted","Visibility","continuous","once","divided","relaxed","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAGMA,G,OAAQ,CACVC,GAAI,CACAC,UAAW,OAEfC,GAAI,CACAC,OAAQ,eAEZC,GAAI,CACAH,UAAW,MACXI,QAAS,WAEbC,KAAM,CACFC,aAAc,WAIhBC,E,iLAEE,OACI,gBAACC,EAAA,EAAKC,KAAN,CAAWC,IAAKC,KAAKC,SAASC,YAC1B,gBAACL,EAAA,EAAKM,QAAN,KACI,gBAACN,EAAA,EAAKO,OAAN,KACI,4BAAOC,KAAKC,MAAMC,aAClB,4CAAoBF,KAAKC,MAAME,YAEnC,gBAACX,EAAA,EAAKY,YAAN,KACI,iDAAyBJ,KAAKC,MAAMI,iBACpC,mCAAWL,KAAKC,MAAMK,W,GAXpBC,aAmBbC,EAAb,YACI,WAAYP,GAAO,IAAD,8BACd,4CAAMA,KACDQ,MAAQ,CACTC,GAAI,IAAIC,UAAU,0BAClBC,WAAW,EACXC,mBAAmB,EACnBC,aAAc,IANJ,EADtB,iFA+ByB,IAAD,OAChBd,KAAKS,MAAMC,GAAGK,OAAS,WAGnB,EAAKC,SAAS,CAACJ,WADG,KAItBZ,KAAKS,MAAMC,GAAGO,UAAY,SAAAC,GAEtB,IAAMC,EAAUC,KAAKC,MAAMH,EAAII,MAC3BR,EAAe,EAAKL,MAAMK,aAC9BA,EAAaS,KAAK,gBAAC,EAAD,CACdjB,GAAIa,EAAQK,WACZtB,YAAaiB,EAAQjB,YACrBG,gBAAiBc,EAAQd,gBACzBF,UAAWgB,EAAQhB,aACvB,EAAKa,SAAS,CAACF,iBACfW,QAAQC,IAAIP,IAGhBnB,KAAKS,MAAMC,GAAGiB,QAAU,WAEpB,EAAKX,SAAS,CAACJ,WADG,OApD9B,+BA2DQ,OACI,2BACA,gBAACb,EAAA,EAAD,CAAQ6B,GAAG,KAAKC,UAAU,SAAS/C,MAAOA,EAAMG,GAAI6C,QAAQ,8BAC5D,gBAAC/B,EAAA,EAAD,CAAQ6B,GAAG,KAAKC,UAAU,SAAS/C,MAAOA,EAAMK,IAC5C,iDACA,wBAAML,MAAO,CAAC,QAAW,OAAQ,MAASkB,KAAKS,MAAMG,UAAY,QAAU,QAASZ,KAAKS,MAAMG,UAAY,YAAc,iBAEzH,gBAACmB,EAAA,EAAD,CAASC,UAAQ,EAAClD,MAAO,CAAC,OAAU,UAChC,gBAACmD,EAAA,EAAD,CACIL,GAAIpC,IACJ0C,YAAY,EACZC,MAAM,EACNC,SAAO,EAACJ,UAAQ,EAACK,SAAO,GAEnBrC,KAAKS,MAAMK,oBAzExC,GAA+BP,aCnCV+B,E,iLAEb,OACI,gBAAC,EAAD,U,GAHqB/B,aCSbgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.07a551fc.chunk.js","sourcesContent":["import * as React from \"react\"\nimport { Header, List, Segment, Visibility} from 'semantic-ui-react'\nimport Infinite from 'react-infinite';\nconst style = {\n    h1: {\n        marginTop: '3em',\n    },\n    h2: {\n        margin: '4em 0em 2em',\n    },\n    h3: {\n        marginTop: '2em',\n        padding: '2em 0em',\n    },\n    last: {\n        marginBottom: '300px',\n    },\n}\n\nclass Interaction extends React.Component {\n    render() {\n        return (\n            <List.Item key={Math.random().toString()}>\n                <List.Content>\n                    <List.Header>\n                        <span>{this.props.productName}</span>\n                        <span>Published at {this.props.timestamp}</span>\n                    </List.Header>\n                    <List.Description>\n                        <span>Interaction Type: {this.props.interactionType}</span>\n                        <span>ID: {this.props.id}</span>\n                    </List.Description>\n                </List.Content>\n            </List.Item>\n        );\n    }\n}\n\nexport class EventFeed extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            ws: new WebSocket('ws://localhost:8000/ws'),\n            connected: false,\n            isInfiniteLoading: false,\n            interactions: []\n        };\n    }\n\n    // handleInfiniteLoad() {\n    //     this.setState({\n    //         isInfiniteLoading: true\n    //     });\n    //     setTimeout(function() {\n    //         var elemLength = that.state.elements.length,\n    //             newElements = that.buildElements(elemLength, elemLength + 1000);\n    //         that.setState({\n    //             isInfiniteLoading: false,\n    //             elements: that.state.elements.concat(newElements)\n    //         });\n    //     }, 2500);\n    // }\n\n    // elementInfiniteLoad() {\n    //     return <div className=\"infinite-list-item\">\n    //         Loading...\n    //     </div>;\n    // }\n\n    componentDidMount() {\n        this.state.ws.onopen = () => {\n            // on connecting, do nothing but log it to the console\n            const connected = true;\n            this.setState({connected})\n        };\n\n        this.state.ws.onmessage = evt => {\n            // listen to data sent from the websocket server\n            const message = JSON.parse(evt.data);\n            let interactions = this.state.interactions;\n            interactions.push(<Interaction\n                id={message.identifier}\n                productName={message.productName}\n                interactionType={message.interactionType}\n                timestamp={message.timestamp} />);\n            this.setState({interactions});\n            console.log(message);\n        };\n\n        this.state.ws.onclose = () => {\n            const connected = false;\n            this.setState({connected})\n            // automatically try to reconnect on connection loss\n        }\n    }\n\n    render() {\n        return (\n            <div>\n            <Header as='h2' textAlign='center' style={style.h2} content='Perch Device Interactions' />\n            <Header as='h3' textAlign='center' style={style.h3}>\n                <span>Websocket status:</span>\n                <span style={{'padding': '10px', 'color': this.state.connected ? 'green' : 'red'}}>{this.state.connected ? 'connected' : 'disconnected'}</span>\n            </Header>\n                <Segment inverted style={{'height': '100vh'}}>\n                    <Visibility\n                        as={List}\n                        continuous={false}\n                        once={false}\n                        divided inverted relaxed\n                    >\n                            {this.state.interactions}\n                    </Visibility>\n                </Segment>\n            </div>\n        )\n    }\n}","import * as React from \"react\"\nimport {EventFeed} from \"./Feed\";\n\nexport default class App extends React.Component {\n    render() {\n        return (\n            <EventFeed />\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}